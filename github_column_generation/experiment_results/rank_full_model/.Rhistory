plot(x=points[,1],y=points[,2],col=points[,3],cex=2,pch=points[,4],xlab = "",ylab="y-axes",main = "Scatter Plot of XOR Problem",xlim = c(0,1.5),ylim=c(0,1.5))
title(xlab="x-axes", line=1, cex.lab=1)
legend("topright",legend=c("negative labeled points","positive labeled points"),pch=c('-','+'),col=c("black","red"),cex=0.75)
text(0.1,0.1,expression('S'[1]))
text(1.1,0.1,expression('S'[2]))
text(1.1,1.1,expression('S'[3]))
text(0.1,1.1,expression('S'[4]))
expression('S'[1])+"asd"
expression('S'[1])
par(mar=c(5,5,2,5), xpd=TRUE)
plot(x=points[,1],y=points[,2],col=points[,3],cex=2,pch=points[,4],xlab = "",ylab="y-axes",main = "Scatter Plot of XOR Problem",xlim = c(0,1.5),ylim=c(0,1.5))
title(xlab="x-axes", line=1, cex.lab=1)
legend("topright",legend=c("Negative Labeled Points","Positive Labeled Points"),pch=c('-','+'),col=c("black","red"),cex=0.75)
text(0.1,0.1,expression('S'[1]))
text(0.2,0.1,expression('=R'[1]))
text(0.2,0.1,expression('= R'[1]))
par(mar=c(5,5,2,5), xpd=TRUE)
plot(x=points[,1],y=points[,2],col=points[,3],cex=2,pch=points[,4],xlab = "",ylab="y-axes",main = "Scatter Plot of XOR Problem",xlim = c(0,1.5),ylim=c(0,1.5))
title(xlab="x-axes", line=1, cex.lab=1)
legend("topright",legend=c("Negative Labeled Points","Positive Labeled Points"),pch=c('-','+'),col=c("black","red"),cex=0.75)
text(0.1,0.1,expression('S'[1]))
text(0.2,0.1,expression('= R'[1]))
#set.seed(5)
points<-c(0,0,1,0,1,1,0,1)
points<-matrix(points,nrow=4,ncol=2,byrow = TRUE)
col_p<-matrix(c(1,2,1,2),nrow=4,ncol=1)
type<-matrix(c('+','-','+','-'),nrow=4,ncol=1)
points<-cbind(points,col_p)
points<-cbind(points,type)
#candidates<-matrix(c(2.5,1,2,4),nrow=2,ncol=2,byrow=TRUE)
#col_p<-matrix(c(3,4),nrow=2,ncol=1)
#type<-matrix(c(2,0),nrow=2,ncol=1)
#candidates<-cbind(candidates,col_p)
#candidates<-cbind(candidates,type)
par(mar=c(5,5,2,5), xpd=TRUE)
plot(x=points[,1],y=points[,2],col=points[,3],cex=2,pch=points[,4],xlab = "",ylab="y-axes",main = "Scatter Plot of XOR Problem",xlim = c(0,1.5),ylim=c(0,1.5))
title(xlab="x-axes", line=1, cex.lab=1)
legend("topright",legend=c("Negative Labeled Points","Positive Labeled Points"),pch=c('-','+'),col=c("black","red"),cex=0.75)
text(0.1,0.1,expression('S'[1]))
text(0.2,0.1,expression('= R'[1]))
text(1.1,0.1,expression('S'[2]))
text(1.1,1.1,expression('S'[3]))
text(1.2,1.1,expression('= R'[2]))
text(0.1,1.1,expression('S'[4]))
par(mar=c(5,5,2,5), xpd=TRUE)
plot(x=points[,1],y=points[,2],col=points[,3],cex=2,pch=points[,4],xlab = "",ylab="y-axes",main = "Scatter Plot of XOR Problem",xlim = c(0,1.5),ylim=c(0,1.5))
title(xlab="x-axes", line=1, cex.lab=1)
legend("topright",legend=c("Negative Labeled Points","Positive Labeled Points"),pch=c('-','+'),col=c("black","red"),cex=0.75)
text(0.1,0.1,expression('S'[1]))
text(0.2,0.1,expression('= R'[1]))
text(1.1,0.1,expression('S'[2]))
text(0.8,1.1,expression('S'[3]))
text(0.9,1.1,expression('= R'[2]))
text(0.1,1.1,expression('S'[4]))
points<-c(0,sqrt(2),1,1,sqrt(2),0,1,1)
points<-matrix(points,nrow=4,ncol=2,byrow = TRUE)
col_p<-matrix(c(1,2,1,2),nrow=4,ncol=1)
type<-matrix(c('+','-','+','-'),nrow=4,ncol=1)
points<-cbind(points,col_p)
points<-cbind(points,type)
par(mar=c(5,5,2,5), xpd=FALSE)
plot(x=points[,1],y=points[,2],col=points[,3],cex=2,pch=points[,4],xlab = "",ylab=expression('Euclidean Distance to R'[2]),main = "Scatter Plot of XOR Problem",xlim = c(0,1.5),ylim=c(0,1.5))
title(xlab=expression('Euclidean Distance to R'[1]), line=2, cex.lab=1)
text(0.1,sqrt(2)+0.05,expression('S'[1]))
text(sqrt(2)+0.05,0.1,expression('S'[3]))
text(1.1,1.1,expression('S'[2]))
text(1.2,1.1,expression(', S'[4]))
abline(1.7,-1,col="green")
par(mar=c(5,5,2,5), xpd=FALSE)
plot(x=points[,1],y=points[,2],col=points[,3],cex=2,pch=points[,4],xlab = "",ylab=expression('Euclidean Distance to R'[2]),main = "Scatter Plot of XOR Problem",xlim = c(0,1.5),ylim=c(0,1.5))
title(xlab=expression('Euclidean Distance to R'[1]), line=2, cex.lab=1)
text(0.1,sqrt(2)+0.05,expression('S'[1]))
text(sqrt(2)+0.05,0.1,expression('S'[3]))
text(0.8,1.1,expression('S'[2]))
text(0.9,1.1,expression(', S'[4]))
abline(1.7,-1,col="green")
legend("topright",legend=c("negative labeled points","positive labeled points","linear decision boundary"),pch=c('-','+',0),col=c("black","red","green"),cex=0.75)
legend("topright",legend=c("negative labeled points","positive labeled points","linear decision boundary"),pch=c('-','+',NA),lty=c(NA,NA,1),col=c("black","red","green"),cex=0.75)
#set.seed(5)
points<-c(0,0,1,0,1,1,0,1)
points<-matrix(points,nrow=4,ncol=2,byrow = TRUE)
col_p<-matrix(c(1,2,1,2),nrow=4,ncol=1)
type<-matrix(c('+','-','+','-'),nrow=4,ncol=1)
points<-cbind(points,col_p)
points<-cbind(points,type)
#candidates<-matrix(c(2.5,1,2,4),nrow=2,ncol=2,byrow=TRUE)
#col_p<-matrix(c(3,4),nrow=2,ncol=1)
#type<-matrix(c(2,0),nrow=2,ncol=1)
#candidates<-cbind(candidates,col_p)
#candidates<-cbind(candidates,type)
par(mar=c(5,5,2,5), xpd=TRUE)
plot(x=points[,1],y=points[,2],col=points[,3],cex=2,pch=points[,4],xlab = "",ylab="y-axes",main = "Scatter Plot of Samples in the Euclidean Distance Space",xlim = c(0,1.5),ylim=c(0,1.5))
title(xlab="x-axes", line=1, cex.lab=1)
legend("topright",legend=c("Negative Labeled Points","Positive Labeled Points"),pch=c('-','+'),col=c("black","red"),cex=0.75)
text(0.1,0.1,expression('S'[1]))
text(0.2,0.1,expression('= R'[1]))
text(1.1,0.1,expression('S'[2]))
text(0.8,1.1,expression('S'[3]))
text(0.9,1.1,expression('= R'[2]))
text(0.1,1.1,expression('S'[4]))
points<-c(0,sqrt(2),1,1,sqrt(2),0,1,1)
points<-matrix(points,nrow=4,ncol=2,byrow = TRUE)
col_p<-matrix(c(1,2,1,2),nrow=4,ncol=1)
type<-matrix(c('+','-','+','-'),nrow=4,ncol=1)
points<-cbind(points,col_p)
points<-cbind(points,type)
par(mar=c(5,5,2,5), xpd=FALSE)
plot(x=points[,1],y=points[,2],col=points[,3],cex=2,pch=points[,4],xlab = "",ylab=expression('Euclidean Distance to R'[2]),main = "Scatter Plot of XOR Problem",xlim = c(0,1.5),ylim=c(0,1.5))
title(xlab=expression('Euclidean Distance to R'[1]), line=2, cex.lab=1)
text(0.1,sqrt(2)+0.05,expression('S'[1]))
text(sqrt(2)+0.05,0.1,expression('S'[3]))
text(0.8,1.1,expression('S'[2]))
text(0.9,1.1,expression(', S'[4]))
abline(1.7,-1,col="green")
legend("topright",legend=c("negative labeled points","positive labeled points","linear decision boundary"),pch=c('-','+',NA),lty=c(NA,NA,1),col=c("black","red","green"),cex=0.75)
#set.seed(5)
points<-c(0,0,1,0,1,1,0,1)
points<-matrix(points,nrow=4,ncol=2,byrow = TRUE)
col_p<-matrix(c(1,2,1,2),nrow=4,ncol=1)
type<-matrix(c('+','-','+','-'),nrow=4,ncol=1)
points<-cbind(points,col_p)
points<-cbind(points,type)
#candidates<-matrix(c(2.5,1,2,4),nrow=2,ncol=2,byrow=TRUE)
#col_p<-matrix(c(3,4),nrow=2,ncol=1)
#type<-matrix(c(2,0),nrow=2,ncol=1)
#candidates<-cbind(candidates,col_p)
#candidates<-cbind(candidates,type)
par(mar=c(5,5,2,5), xpd=TRUE)
plot(x=points[,1],y=points[,2],col=points[,3],cex=2,pch=points[,4],xlab = "",ylab="y-axes",main = "Scatter Plot of Samples in the Euclidean Distance Space",xlim = c(0,1.5),ylim=c(0,1.5))
title(xlab="x-axes", line=1, cex.lab=1)
legend("topright",legend=c("Negative Labeled Points","Positive Labeled Points"),pch=c('-','+'),col=c("black","red"),cex=0.75)
text(0.1,0.1,expression('S'[1]))
text(0.2,0.1,expression('= R'[1]))
text(1.1,0.1,expression('S'[2]))
text(0.8,1.1,expression('S'[3]))
text(0.9,1.1,expression('= R'[2]))
text(0.1,1.1,expression('S'[4]))
points<-c(0,sqrt(2),1,1,sqrt(2),0,1,1)
points<-matrix(points,nrow=4,ncol=2,byrow = TRUE)
col_p<-matrix(c(1,2,1,2),nrow=4,ncol=1)
type<-matrix(c('+','-','+','-'),nrow=4,ncol=1)
points<-cbind(points,col_p)
points<-cbind(points,type)
par(mar=c(5,5,2,5), xpd=FALSE)
plot(x=points[,1],y=points[,2],col=points[,3],cex=2,pch=points[,4],xlab = "",ylab=expression('Euclidean Distance to R'[2]),main = "Scatter Plot of XOR Problem",xlim = c(0,1.5),ylim=c(0,1.5))
title(xlab=expression('Euclidean Distance to R'[1]), line=2, cex.lab=1)
text(0.1,sqrt(2)+0.05,expression('S'[1]))
text(sqrt(2)+0.05,0.1,expression('S'[3]))
text(0.8,1.1,expression('S'[2]))
text(0.9,1.1,expression(', S'[4]))
abline(1.7,-1,col="green")
legend("topright",legend=c("negative labeled points","positive labeled points","linear decision boundary"),pch=c('-','+',NA),lty=c(NA,NA,1),col=c("black","red","green"),cex=0.75)
#points(candidates[,1],candidates[,2],col=candidates[,3],cex=2,pch=candidates[,4])
#text(3,-0.4,"  :     Randomly Chosen Point on 2-D space", cex=1, adj=0, srt=0)
#points(2.95,-0.42,pch=2,col="green")
#text(3,-0.7,"  :     Best Candidate Point on 2-D space", cex=1, adj=0, srt=0)
#points(2.95,-0.72,pch=0,col="blue")
nydata <- read.table(file="ny.txt",header=TRUE)
library(data.table)
folder="/Users/can/desktop/github_column_generation/experiment_results"
models<-c("rank_svm","rank_cg","rank_cg_prot_dot_product_rate","rank_full_model")
m<-c("/rank_svm","/ranking_cg/obj_0.005","ranking_cg_prototype/median_initial/learning_rate_001/obj_0.005","/rank_full_model")
file_name_extension<-c("_rank_svm.csv","_rank_cg.csv","_rank_cg_prototype.csv","_rank_full_svm.csv")
#dataset<-c("xor","xor_two","votes","ionosphere","sonar","spectf","survival","cancer_wbc","spambase","parkinsons","cleveland_heart","xor_curse_of_d1","xor_curse_of_d2","xor_curse_of_d3","monks1","monks1_v2","survival_scaled")
dataset<-c("xor","votes","ionosphere","sonar","spectf","survival_scaled","cancer_wbc","monks1","parkinsons","cleveland_heart")
mean_test_roc_summary<-matrix(0,nrow=length(dataset),ncol=5)
mean_test_roc_summary<-as.data.table(mean_test_roc_summary)
mean_test_roc_summary$V1<-as.factor(mean_test_roc_summary$V1)
for (i in 1:length(dataset)){
mean_test_roc_summary[i,1]=dataset[i]
for (j in 1:length(models)){
tmp=paste0(folder,m[j])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
mean_test_roc_summary[i,j+1]=round(mean(data$test_roc),3)
}
}
colnames(mean_test_roc_summary)<-c("dataset","rank_svm","rank_cg","rank_cg_prot_dot_product_rate","rank_full_model")
sd_summary<-matrix(0,nrow=length(dataset),ncol=5)
sd_summary<-as.data.table(sd_summary)
sd_summary$V1<-as.factor(sd_summary$V1)
for (i in 1:length(dataset)){
sd_summary[i,1]=dataset[i]
for (j in 1:length(models)){
tmp=paste0(folder,m[j])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
sd_summary[i,j+1]=round(sd(data$test_roc),3)
}
}
colnames(sd_summary)<-c("dataset","rank_svm","rank_cg","rank_cg_prot_dot_product_rate","rank_full_model")
avg_no_features_summary<-matrix(0,nrow=length(dataset),ncol=5)
avg_no_features_summary<-as.data.table(avg_no_features_summary)
avg_no_features_summary$V1<-as.factor(avg_no_features_summary$V1)
for (i in 1:length(dataset)){
avg_no_features_summary[i,1]=dataset[i]
for (j in 2:length(models)){
tmp=paste0(folder,m[j])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
avg_no_features_summary[i,j+1]=round(mean(data$Num_features),3)
}
}
colnames(avg_no_features_summary)<-c("dataset","rank_svm","rank_cg","rank_cg_prototype_dot_product_rate","rank_full_model")
avg_no_features_summary$rank_svm<-avg_no_features_summary$rank_full_model
train_roc_summary<-matrix(0,nrow=length(dataset),ncol=5)
train_roc_summary<-as.data.table(train_roc_summary)
train_roc_summary$V1<-as.factor(train_roc_summary$V1)
for (i in 1:length(dataset)){
train_roc_summary[i,1]=dataset[i]
for (j in 1:length(models)){
tmp=paste0(folder,m[j])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
train_roc_summary[i,j+1]=round(mean(data$train_roc),3)
}
}
colnames(train_roc_summary)<-c("dataset","rank_svm","rank_cg","rank_cg_prototype","rank_full_model")
test_accu_summary<-matrix(0,nrow=length(dataset),ncol=5)
test_accu_summary<-as.data.table(test_accu_summary)
test_accu_summary$V1<-as.factor(test_accu_summary$V1)
for (i in 1:length(dataset)){
test_accu_summary[i,1]=dataset[i]
for (j in 1:length(models)){
tmp=paste0(folder,m[j])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
test_accu_summary[i,j+1]=round(mean(data$test_accu),3)
}
}
colnames(test_accu_summary)<-c("dataset","rank_svm","rank_cg","rank_cg_prototype","rank_full_model")
##
test_sd_summary<-matrix(0,nrow=length(dataset),ncol=5)
test_sd_summary<-as.data.table(test_sd_summary)
test_sd_summary$V1<-as.factor(test_sd_summary$V1)
for (i in 1:length(dataset)){
test_sd_summary[i,1]=dataset[i]
for (j in 1:length(models)){
tmp=paste0(folder,m[j])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
test_sd_summary[i,j+1]=round(sd(data$test_accu),3)
}
}
colnames(test_sd_summary)<-c("dataset","rank_svm","rank_cg","rank_cg_prototype","rank_full_model")
##
#rank_cg_prot vs rank_svm----
t_test_p_values<-matrix(0,nrow=length(dataset),ncol=7)
t_test_p_values<-as.data.table(t_test_p_values)
t_test_p_values$V1<-as.factor(t_test_p_values$V1)
for (i in 1:length(dataset)){
t_test_p_values[i,1]=dataset[i]
counter=2
for (j in (1:3)){
#j=1
#k=j+3
for(k in ((j+1):4)){
tmp=paste0(folder,m[j])
setwd(tmp)
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
data1_test_roc=data$test_roc
#mean_test_roc_summary[i,j+1]=round(mean(data$test_roc),3)
tmp=paste0(folder,m[k])
setwd(tmp)
tmp_file<-paste0(dataset[i],file_name_extension[k])
data<-read.csv(tmp_file)
data2_test_roc=data$test_roc
t_test_result=t.test(data1_test_roc,data2_test_roc,paired=TRUE)
t_test_p_values[i,counter]=round(t_test_result$p.value,4)
counter=counter+1
}
}
}
tmp_names<-("dataset")
for(j in 1:3){
for (k in (j+1):4){
a=models[j]
b=models[k]
comb=paste0(a,"_vs_",b)
tmp_names<-c(tmp_names,comb)
}
}
colnames(t_test_p_values)<-tmp_names
## t test for accuracy
t_test_p_values_accu<-matrix(0,nrow=length(dataset),ncol=7)
t_test_p_values_accu<-as.data.table(t_test_p_values_accu)
t_test_p_values_accu$V1<-as.factor(t_test_p_values_accu$V1)
for (i in 1:length(dataset)){
t_test_p_values_accu[i,1]=dataset[i]
counter=2
for (j in (1:3)){
#j=1
#k=j+3
for(k in ((j+1):4)){
tmp=paste0(folder,m[j])
setwd(tmp)
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
data1_test_roc=data$test_accu
#mean_test_roc_summary[i,j+1]=round(mean(data$test_roc),3)
tmp=paste0(folder,m[k])
setwd(tmp)
tmp_file<-paste0(dataset[i],file_name_extension[k])
data<-read.csv(tmp_file)
data2_test_roc=data$test_accu
t_test_result=t.test(data1_test_roc,data2_test_roc,paired=TRUE)
t_test_p_values_accu[i,counter]=round(t_test_result$p.value,4)
counter=counter+1
}
}
}
tmp_names<-("dataset")
for(j in 1:3){
for (k in (j+1):4){
a=models[j]
b=models[k]
comb=paste0(a,"_vs_",b)
tmp_names<-c(tmp_names,comb)
}
}
colnames(t_test_p_values_accu)<-tmp_names
View(mean_test_roc_summary)
library(data.table)
folder="/Users/can/desktop/github_column_generation/experiment_results"
models<-c("rank_svm","rank_cg","rank_cg_prot_dot_product_rate","rank_full_model")
m<-c("/rank_svm","/ranking_cg/obj_0.005","/ranking_cg_prototype/median_initial/learning_rate_001/obj_0.005","/rank_full_model")
file_name_extension<-c("_rank_svm.csv","_rank_cg.csv","_rank_cg_prototype.csv","_rank_full_svm.csv")
#dataset<-c("xor","xor_two","votes","ionosphere","sonar","spectf","survival","cancer_wbc","spambase","parkinsons","cleveland_heart","xor_curse_of_d1","xor_curse_of_d2","xor_curse_of_d3","monks1","monks1_v2","survival_scaled")
dataset<-c("xor","votes","ionosphere","sonar","spectf","survival_scaled","cancer_wbc","monks1","parkinsons","cleveland_heart")
mean_test_roc_summary<-matrix(0,nrow=length(dataset),ncol=5)
mean_test_roc_summary<-as.data.table(mean_test_roc_summary)
mean_test_roc_summary$V1<-as.factor(mean_test_roc_summary$V1)
for (i in 1:length(dataset)){
mean_test_roc_summary[i,1]=dataset[i]
for (j in 1:length(models)){
tmp=paste0(folder,m[j])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
mean_test_roc_summary[i,j+1]=round(mean(data$test_roc),3)
}
}
colnames(mean_test_roc_summary)<-c("dataset","rank_svm","rank_cg","rank_cg_prot_dot_product_rate","rank_full_model")
sd_summary<-matrix(0,nrow=length(dataset),ncol=5)
sd_summary<-as.data.table(sd_summary)
sd_summary$V1<-as.factor(sd_summary$V1)
for (i in 1:length(dataset)){
sd_summary[i,1]=dataset[i]
for (j in 1:length(models)){
tmp=paste0(folder,m[j])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
sd_summary[i,j+1]=round(sd(data$test_roc),3)
}
}
colnames(sd_summary)<-c("dataset","rank_svm","rank_cg","rank_cg_prot_dot_product_rate","rank_full_model")
avg_no_features_summary<-matrix(0,nrow=length(dataset),ncol=5)
avg_no_features_summary<-as.data.table(avg_no_features_summary)
avg_no_features_summary$V1<-as.factor(avg_no_features_summary$V1)
for (i in 1:length(dataset)){
avg_no_features_summary[i,1]=dataset[i]
for (j in 2:length(models)){
tmp=paste0(folder,m[j])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
avg_no_features_summary[i,j+1]=round(mean(data$Num_features),3)
}
}
colnames(avg_no_features_summary)<-c("dataset","rank_svm","rank_cg","rank_cg_prototype_dot_product_rate","rank_full_model")
avg_no_features_summary$rank_svm<-avg_no_features_summary$rank_full_model
train_roc_summary<-matrix(0,nrow=length(dataset),ncol=5)
train_roc_summary<-as.data.table(train_roc_summary)
train_roc_summary$V1<-as.factor(train_roc_summary$V1)
for (i in 1:length(dataset)){
train_roc_summary[i,1]=dataset[i]
for (j in 1:length(models)){
tmp=paste0(folder,m[j])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
train_roc_summary[i,j+1]=round(mean(data$train_roc),3)
}
}
colnames(train_roc_summary)<-c("dataset","rank_svm","rank_cg","rank_cg_prototype","rank_full_model")
test_accu_summary<-matrix(0,nrow=length(dataset),ncol=5)
test_accu_summary<-as.data.table(test_accu_summary)
test_accu_summary$V1<-as.factor(test_accu_summary$V1)
for (i in 1:length(dataset)){
test_accu_summary[i,1]=dataset[i]
for (j in 1:length(models)){
tmp=paste0(folder,m[j])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
test_accu_summary[i,j+1]=round(mean(data$test_accu),3)
}
}
colnames(test_accu_summary)<-c("dataset","rank_svm","rank_cg","rank_cg_prototype","rank_full_model")
##
test_sd_summary<-matrix(0,nrow=length(dataset),ncol=5)
test_sd_summary<-as.data.table(test_sd_summary)
test_sd_summary$V1<-as.factor(test_sd_summary$V1)
for (i in 1:length(dataset)){
test_sd_summary[i,1]=dataset[i]
for (j in 1:length(models)){
tmp=paste0(folder,m[j])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
test_sd_summary[i,j+1]=round(sd(data$test_accu),3)
}
}
colnames(test_sd_summary)<-c("dataset","rank_svm","rank_cg","rank_cg_prototype","rank_full_model")
##
#rank_cg_prot vs rank_svm----
t_test_p_values<-matrix(0,nrow=length(dataset),ncol=7)
t_test_p_values<-as.data.table(t_test_p_values)
t_test_p_values$V1<-as.factor(t_test_p_values$V1)
for (i in 1:length(dataset)){
t_test_p_values[i,1]=dataset[i]
counter=2
for (j in (1:3)){
#j=1
#k=j+3
for(k in ((j+1):4)){
tmp=paste0(folder,m[j])
setwd(tmp)
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
data1_test_roc=data$test_roc
#mean_test_roc_summary[i,j+1]=round(mean(data$test_roc),3)
tmp=paste0(folder,m[k])
setwd(tmp)
tmp_file<-paste0(dataset[i],file_name_extension[k])
data<-read.csv(tmp_file)
data2_test_roc=data$test_roc
t_test_result=t.test(data1_test_roc,data2_test_roc,paired=TRUE)
t_test_p_values[i,counter]=round(t_test_result$p.value,4)
counter=counter+1
}
}
}
tmp_names<-("dataset")
for(j in 1:3){
for (k in (j+1):4){
a=models[j]
b=models[k]
comb=paste0(a,"_vs_",b)
tmp_names<-c(tmp_names,comb)
}
}
colnames(t_test_p_values)<-tmp_names
## t test for accuracy
t_test_p_values_accu<-matrix(0,nrow=length(dataset),ncol=7)
t_test_p_values_accu<-as.data.table(t_test_p_values_accu)
t_test_p_values_accu$V1<-as.factor(t_test_p_values_accu$V1)
for (i in 1:length(dataset)){
t_test_p_values_accu[i,1]=dataset[i]
counter=2
for (j in (1:3)){
#j=1
#k=j+3
for(k in ((j+1):4)){
tmp=paste0(folder,m[j])
setwd(tmp)
tmp_file<-paste0(dataset[i],file_name_extension[j])
data<-read.csv(tmp_file)
data1_test_roc=data$test_accu
#mean_test_roc_summary[i,j+1]=round(mean(data$test_roc),3)
tmp=paste0(folder,m[k])
setwd(tmp)
tmp_file<-paste0(dataset[i],file_name_extension[k])
data<-read.csv(tmp_file)
data2_test_roc=data$test_accu
t_test_result=t.test(data1_test_roc,data2_test_roc,paired=TRUE)
t_test_p_values_accu[i,counter]=round(t_test_result$p.value,4)
counter=counter+1
}
}
}
tmp_names<-("dataset")
for(j in 1:3){
for (k in (j+1):4){
a=models[j]
b=models[k]
comb=paste0(a,"_vs_",b)
tmp_names<-c(tmp_names,comb)
}
}
colnames(t_test_p_values_accu)<-tmp_names
View(mean_test_roc_summary)
