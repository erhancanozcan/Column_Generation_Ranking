#service_time=service2_generator(x)
service_time=service2_generator(runif(1))
FEL[3]<<-clockk+service_time
B1<<-B1+LST1*(clockk-time_last_event)
time_last_event<<-clockk
if(LQT>max_q_length){
max_q_length<<-LQT
}
}
else{
total_no_customer_joining_queue<<-total_no_customer_joining_queue+1
tmp_LQT=LQT
tmp_LQT=tmp_LQT+1
i=tmp_LQT+LST1+LST2
if(i<100){
chkout[i]<<-clockk
B1<<-B1+(clockk-time_last_event)
B2<<-B2+(clockk-time_last_event)
time_last_event<<-clockk
if(tmp_LQT>max_q_length){
max_q_length<<-tmp_LQT
}
LQT<<-tmp_LQT
}
else{
print("ERROR!!!: overflow in the system")
break
}
}
#rn_counter<<-tmp_rn_counter
}
departure1<-function(LST1,chkout,clockk,LST2,FEL,time_last_event,LQT,max_q_length,B1,B2,total_no_customer_joining_queue,
customer_uses_server1,Wq_estimator,RN_list,rn_counter,sumnum,no_of_departures,S){
tmp_chkout=chkout
sumnum<<-sumnum+LQT*(clockk-time_last_event)
B1<<-B1+(clockk-time_last_event)
B2<<-B2+LST2*(clockk-time_last_event)
time_last_event<<-clockk
RT=clockk-tmp_chkout[1]
S<<-S+RT
no_of_departures<<-no_of_departures+1
if(LQT<1){
a=Inf
LST1<<-0
FEL[2]<<-a
}
else{
Wq_estimator<<-Wq_estimator+(clockk-tmp_chkout[3])
tmp_chkout[1]=tmp_chkout[3]
customer_uses_server1<<-customer_uses_server1+1
for(i in 3:(LQT+2)){
i1=i+1
tmp_chkout[i]=tmp_chkout[i1]
}
chkout<<-tmp_chkout
LQT<<-LQT-1
#tmp_rn_counter=rn_counter
#x=RN_list[tmp_rn_counter]
#print(x)
#tmp_rn_counter=tmp_rn_counter+1
#service_time=service1_generator(x)
service_time=service1_generator(runif(1))
#rn_counter<<-tmp_rn_counter
FEL[2]<<-clockk+service_time
}
}
departure2<-function(LST1,chkout,clockk,LST2,FEL,time_last_event,LQT,max_q_length,B1,B2,total_no_customer_joining_queue,
customer_uses_server1,Wq_estimator,RN_list,rn_counter,sumnum,no_of_departures,S){
tmp_chkout=chkout
sumnum<<-sumnum+LQT*(clockk-time_last_event)
B1<<-B1+LST1*(clockk-time_last_event)
B2<<-B2+(clockk-time_last_event)
time_last_event<<-clockk
RT=clockk-tmp_chkout[2]
S<<-S+RT
no_of_departures<<-no_of_departures+1
if(LQT<1){
a=Inf
LST2<<-0
FEL[3]<<-a
}
else{
Wq_estimator<<-Wq_estimator+(clockk-tmp_chkout[3])
customer_uses_server2<<-customer_uses_server2+1
for(i in 2:(LQT+2)){
i1=i+1
tmp_chkout[i]=tmp_chkout[i1]
}
chkout<<-tmp_chkout
LQT<<-LQT-1
#tmp_rn_counter=rn_counter
#x=RN_list[tmp_rn_counter]
#print(x)
#tmp_rn_counter=tmp_rn_counter+1
#service_time=service2_generator(x)
service_time=service2_generator(runif(1))
#rn_counter<<-tmp_rn_counter
FEL[3]<<-clockk+service_time
}
}
report_generator_part_b<-function(B1,B2,S,sumnum,clockk,no,customer_uses_server1,customer_uses_server2,
LQT,Wq_estimator,no_of_customers){
a<-paste0("avg.no.of.cust_in_queue   :  ", round(sumnum/clockk,5))
x<-paste0("avg.no.of.cust_in_sys     :  ", round(S/clockk,5))
b<-paste0("avg.time.spent.system     :  ", round(S/no_of_customers,5))
c<-paste0("total_util_serv1          :  ", round(B1/clockk,5))
d<-paste0("total_util_serv2          :  ", round(B2/clockk,5))
e<-paste0("prob_join_queue           :  ", round(no/1000,5))
f<-paste0("avg_time_in_queue_per_cus :  ", round(Wq_estimator/1000,5))
g<-paste0("Lq^                       :  ", round(sumnum/clockk,5))
h<-paste0("Estimated lambda          :  ", round((sumnum/clockk)/(Wq_estimator/1000),5))
i<-paste0("Real lambda               :  ", round(1/10.5,5))
cat(paste0(a, "\n",x,"\n", b,"\n", c,"\n", d,"\n", e,"\n", f,"\n", g,"\n", h,"\n", i))
}
initialization(clockk,iminent_event,LQT,LST1,LST2,time_last_event,max_q_length,chkout,
no_of_departures,sumnum,FEL,total_no_customer_joining_queue,customer_uses_server1,
customer_uses_server2,B1,B2,S,Wq_estimator,rn_counter,RN_list,
cust_arrive_time_list,cust_service_start_list,cust_depart_list,cust_serv_type)
while(no_of_departures<1000){
timeadvance(iminent_event,FEL,clockk)
#print(chkout)
if(iminent_event==1){
arrival(LST1,chkout,clockk,LST2,FEL,time_last_event,LQT,max_q_length,B1,B2,total_no_customer_joining_queue,
customer_uses_server1,customer_uses_server2,RN_list,rn_counter,sumnum)
}
else if(iminent_event==2){
departure1(LST1,chkout,clockk,LST2,FEL,time_last_event,LQT,max_q_length,B1,B2,total_no_customer_joining_queue,
customer_uses_server1,Wq_estimator,RN_list,rn_counter,sumnum,no_of_departures,S)
}
else if(iminent_event==3){
departure2(LST1,chkout,clockk,LST2,FEL,time_last_event,LQT,max_q_length,B1,B2,total_no_customer_joining_queue,
customer_uses_server1,Wq_estimator,RN_list,rn_counter,sumnum,no_of_departures,S)
}
}
report_generator_part_b(B1,B2,S,sumnum,clockk,total_no_customer_joining_queue,customer_uses_server1,customer_uses_server2,
LQT,Wq_estimator,no_of_customers)
set.seed(1033)
interarrival_generator<-function(unif_rand_number){
return(11*unif_rand_number+5)
}
service1_generator<-function(unif_rand_number){
return(8*unif_rand_number+12)
}
service2_generator<-function(unif_rand_number){
if (unif_rand_number <= 0.12){
x=5
}
else if(unif_rand_number>0.12 && unif_rand_number<=0.52){
x=15
}
else if(unif_rand_number>0.52 && unif_rand_number<=0.87){
x=25
}
else if(unif_rand_number>0.87 && unif_rand_number<=0.95){
x=35
}
else if(unif_rand_number>0.95 && unif_rand_number<=1){
x=45
}
else{
x=Inf
}
return(x)
}
#'main definitions
#system constants
NEVENTS=3
NCUSTOMERS=1000
#system variables
num_of_events=NEVENTS
no_of_customers=NCUSTOMERS
LQT=0
LST1=0
LST2=0
FEL=c(Inf,Inf,Inf)
clockk=0
iminent_event=-1
#variables for statistics
max_q_length=0
no_of_departures=0
rn_counter=1
total_no_customer_joining_queue=0
customer_uses_server1=0
customer_uses_server2=0
time_last_event=0
sumnum=0
B1=0
B2=0
S=0
chkout=0
Wq_estimator=0
#'my style for statistics
cust_arrive_time_list=-1
cust_service_start_list=-1
cust_depart_list=-1
cust_serv_type=-1
#random variables
RN_list=c(0.497,0.380,0.862,0.020,0.391,0.975,0.480,0.905,0.759,0.560,0.593)
initialization<-function(clockk,iminent_event,LQT,LST1,LST2,time_last_event,max_q_length,chkout,
no_of_departures,sumnum,FEL,total_no_customer_joining_queue,customer_uses_server1,
customer_uses_server2,B1,B2,S,Wq_estimator,rn_counter,RN_list,
cust_arrive_time_list,cust_service_start_list,cust_depart_list,cust_serv_type){
a=Inf
chkout<<-c(chkout,0,rep(-1,100))
clockk<<-0
iminent_event<<-0
LQT<<-0
LST1<<-1
LST2<<-1
time_last_event<<-0
max_q_length<<-0
no_of_departures<<-0
sumnum<<-0
total_no_customer_joining_queue<<-0
customer_uses_server1<<-1
customer_uses_server2<<-0
B1<<-0
B2<<-0
S<<-0
Wq_estimator<<-0
#k1=RN_list[rn_counter]
#print(k1)
#rn_counter_tmp=1
#rn_counter_tmp<-rn_counter_tmp+1
#FEL[1]<<-interarrival_generator(k1)
cust_arrive_time_list<<-0
FEL[1]<<-interarrival_generator(runif(1))
#k2=RN_list[rn_counter_tmp]
#print(k2)
#rn_counter_tmp<-rn_counter_tmp+1
#k3=RN_list[rn_counter_tmp]
#print(k3)
#rn_counter_tmp<-rn_counter_tmp+1
#rn_counter<<-rn_counter_tmp
cust_service_start_list<<-0
#FEL[2]<<-clockk+service1_generator(k2)
cust_serv_type<<-1
FEL[2]<<-clockk+service1_generator(runif(1))
#FEL[3]<<-clockk+service2_generator(k3)
FEL[3]<<-clockk+service2_generator(runif(1))
}
timeadvance<-function(iminent_event,FEL,clockk){
a=Inf
tmp_iminent_event=0
for(i in 1:length(FEL)){
if (FEL[i]<a){
a=FEL[i]
tmp_iminent_event=i
}
}
if(tmp_iminent_event==0){
print("ERROR!!! FUTURE LIST EMPTY")
break
}
else{
clockk<<-FEL[tmp_iminent_event]
}
iminent_event<<-tmp_iminent_event
}
arrival<-function(LST1,chkout,clockk,LST2,FEL,time_last_event,LQT,max_q_length,B1,B2,total_no_customer_joining_queue,
customer_uses_server1,customer_uses_server2,RN_list,rn_counter,sumnum){
sumnum<<-sumnum+LQT*(clockk-time_last_event)
#tmp_rn_counter=rn_counter
#x=RN_list[tmp_rn_counter]
#print(x)
#tmp_rn_counter=tmp_rn_counter+1
#iat=interarrival_generator(x)
iat=interarrival_generator(runif(1))
FEL[1]<<-clockk+iat
if(LST1==0){
LST1<<-1
customer_uses_server1<<-customer_uses_server1+1
chkout[1]<<-clockk
#x=RN_list[tmp_rn_counter]
#print(x)
#tmp_rn_counter=tmp_rn_counter+1
#service_time=service1_generator(x)
service_time=service1_generator(runif(1))
FEL[2]<<-clockk+service_time
B2<<-B2+LST2*(clockk-time_last_event)
time_last_event<<-clockk
if(LQT>max_q_length){
max_q_length<<-LQT
}
}
else if(LST2==0){
LST2<<-1
customer_uses_server2<<-customer_uses_server2+1
chkout[2]<<-clockk
#x=RN_list[tmp_rn_counter]
#print(x)
#tmp_rn_counter=tmp_rn_counter+1
#service_time=service2_generator(x)
service_time=service2_generator(runif(1))
FEL[3]<<-clockk+service_time
B1<<-B1+LST1*(clockk-time_last_event)
time_last_event<<-clockk
if(LQT>max_q_length){
max_q_length<<-LQT
}
}
else{
total_no_customer_joining_queue<<-total_no_customer_joining_queue+1
tmp_LQT=LQT
tmp_LQT=tmp_LQT+1
i=tmp_LQT+LST1+LST2
if(i<100){
chkout[i]<<-clockk
B1<<-B1+(clockk-time_last_event)
B2<<-B2+(clockk-time_last_event)
time_last_event<<-clockk
if(tmp_LQT>max_q_length){
max_q_length<<-tmp_LQT
}
LQT<<-tmp_LQT
}
else{
print("ERROR!!!: overflow in the system")
break
}
}
#rn_counter<<-tmp_rn_counter
}
departure1<-function(LST1,chkout,clockk,LST2,FEL,time_last_event,LQT,max_q_length,B1,B2,total_no_customer_joining_queue,
customer_uses_server1,Wq_estimator,RN_list,rn_counter,sumnum,no_of_departures,S){
tmp_chkout=chkout
sumnum<<-sumnum+LQT*(clockk-time_last_event)
B1<<-B1+(clockk-time_last_event)
B2<<-B2+LST2*(clockk-time_last_event)
time_last_event<<-clockk
RT=clockk-tmp_chkout[1]
S<<-S+RT
no_of_departures<<-no_of_departures+1
if(LQT<1){
a=Inf
LST1<<-0
FEL[2]<<-a
}
else{
Wq_estimator<<-Wq_estimator+(clockk-tmp_chkout[3])
tmp_chkout[1]=tmp_chkout[3]
customer_uses_server1<<-customer_uses_server1+1
for(i in 3:(LQT+2)){
i1=i+1
tmp_chkout[i]=tmp_chkout[i1]
}
chkout<<-tmp_chkout
LQT<<-LQT-1
#tmp_rn_counter=rn_counter
#x=RN_list[tmp_rn_counter]
#print(x)
#tmp_rn_counter=tmp_rn_counter+1
#service_time=service1_generator(x)
service_time=service1_generator(runif(1))
#rn_counter<<-tmp_rn_counter
FEL[2]<<-clockk+service_time
}
}
departure2<-function(LST1,chkout,clockk,LST2,FEL,time_last_event,LQT,max_q_length,B1,B2,total_no_customer_joining_queue,
customer_uses_server1,Wq_estimator,RN_list,rn_counter,sumnum,no_of_departures,S){
tmp_chkout=chkout
sumnum<<-sumnum+LQT*(clockk-time_last_event)
B1<<-B1+LST1*(clockk-time_last_event)
B2<<-B2+(clockk-time_last_event)
time_last_event<<-clockk
RT=clockk-tmp_chkout[2]
S<<-S+RT
no_of_departures<<-no_of_departures+1
if(LQT<1){
a=Inf
LST2<<-0
FEL[3]<<-a
}
else{
Wq_estimator<<-Wq_estimator+(clockk-tmp_chkout[3])
customer_uses_server2<<-customer_uses_server2+1
for(i in 2:(LQT+2)){
i1=i+1
tmp_chkout[i]=tmp_chkout[i1]
}
chkout<<-tmp_chkout
LQT<<-LQT-1
#tmp_rn_counter=rn_counter
#x=RN_list[tmp_rn_counter]
#print(x)
#tmp_rn_counter=tmp_rn_counter+1
#service_time=service2_generator(x)
service_time=service2_generator(runif(1))
#rn_counter<<-tmp_rn_counter
FEL[3]<<-clockk+service_time
}
}
report_generator_part_b<-function(B1,B2,S,sumnum,clockk,no,customer_uses_server1,customer_uses_server2,
LQT,Wq_estimator,no_of_customers){
a<-paste0("avg.no.of.cust_in_queue   :  ", round(sumnum/clockk,5))
x<-paste0("avg.no.of.cust_in_sys     :  ", round(S/clockk,5))
b<-paste0("avg.time.spent.system     :  ", round(S/no_of_customers,5))
c<-paste0("total_util_serv1          :  ", round(B1/clockk,5))
d<-paste0("total_util_serv2          :  ", round(B2/clockk,5))
e<-paste0("prob_join_queue           :  ", round(no/1000,5))
f<-paste0("avg_time_in_queue_per_cus :  ", round(Wq_estimator/1000,5))
g<-paste0("Lq^                       :  ", round(sumnum/clockk,5))
h<-paste0("Estimated lambda          :  ", round((sumnum/clockk)/(Wq_estimator/1000),5))
i<-paste0("Real lambda               :  ", round(1/10.5,5))
cat(paste0(a, "\n",x,"\n", b,"\n", c,"\n", d,"\n", e,"\n", f,"\n", g,"\n", h,"\n", i))
}
initialization(clockk,iminent_event,LQT,LST1,LST2,time_last_event,max_q_length,chkout,
no_of_departures,sumnum,FEL,total_no_customer_joining_queue,customer_uses_server1,
customer_uses_server2,B1,B2,S,Wq_estimator,rn_counter,RN_list,
cust_arrive_time_list,cust_service_start_list,cust_depart_list,cust_serv_type)
while(no_of_departures<1000){
timeadvance(iminent_event,FEL,clockk)
#print(chkout)
if(iminent_event==1){
arrival(LST1,chkout,clockk,LST2,FEL,time_last_event,LQT,max_q_length,B1,B2,total_no_customer_joining_queue,
customer_uses_server1,customer_uses_server2,RN_list,rn_counter,sumnum)
}
else if(iminent_event==2){
departure1(LST1,chkout,clockk,LST2,FEL,time_last_event,LQT,max_q_length,B1,B2,total_no_customer_joining_queue,
customer_uses_server1,Wq_estimator,RN_list,rn_counter,sumnum,no_of_departures,S)
}
else if(iminent_event==3){
departure2(LST1,chkout,clockk,LST2,FEL,time_last_event,LQT,max_q_length,B1,B2,total_no_customer_joining_queue,
customer_uses_server1,Wq_estimator,RN_list,rn_counter,sumnum,no_of_departures,S)
}
}
report_generator_part_b(B1,B2,S,sumnum,clockk,total_no_customer_joining_queue,customer_uses_server1,customer_uses_server2,
LQT,Wq_estimator,no_of_customers)
k<-seq(100,10,-1)
CS<-50*k
N<-50/k
c_CS<-600/2*5
c_N=2
plot(x=N,y=CS,xlab="CS in $ (50*k)",ylab="N=# of Replenishments per Unit Time (50/k)",main="Exchange Curve of Total Stock",type="l")
title(sub = "k=sqrt(A/r)")
points(x=c_N,y=c_CS,col="red",lwd=4)
legend("topright",legend=c("Optimal Exchange Curve","Company's Current Position"),col=c("black","red"),lwd=c(1,NA),pch=c(NA,1))
k<-seq(100,10,-1)
CS<-50*k
N<-50/k
c_CS<-600/2*5
c_N=2
plot(x=N,y=CS,xlab="CS in $ (50*k)",ylab="N=# of Replenishments per Unit Time (50/k)",main="Exchange Curve of Total Stock",type="l")
title(sub = "where k=sqrt(A/r)")
points(x=c_N,y=c_CS,col="red",lwd=4)
legend("topright",legend=c("Optimal Exchange Curve","Company's Current Position"),col=c("black","red"),lwd=c(1,NA),pch=c(NA,1))
k<-seq(100,10,-1)
CS<-50*k
N<-50/k
c_CS<-600/2*5
c_N=2
plot(x=N,y=CS,xlab="CS in $ (50*k)",ylab="N=# of Replenishments per Unit Time (50/k)",main="Exchange Curve of Total Stock",type="l")
title(sub = "where k=sqrt(A/r)")
points(x=c_N,y=c_CS,col="red",lwd=4)
legend("topright",legend=c("Optimal Exchange Curve","Company's Current Position"),col=c("black","red"),lwd=c(1,NA),pch=c(NA,1))
c_CS
c_N
CS
N
k<-seq(100,10,-1)
CS<-50*k
N<-50/k
c_CS<-600/2*5
c_N=2
plot(x=N,y=CS,xlab="CS in $ (50*k)",ylab="N=# of Replenishments per Unit Time (50/k)",main="Exchange Curve of Total Stock",type="l")
title(sub = "where k=sqrt(A/r)")
points(x=c_N,y=c_CS,col="red",lwd=4)
legend("topright",legend=c("Optimal Exchange Curve","Company's Current Position"),col=c("black","red"),lwd=c(1,NA),pch=c(NA,1))
k
mean_summary<-cbind(mean_summary,dataset)
mean_summary
library(data.table)
folder="/Users/can/desktop/results"
library(data.table)
folder="/Users/can/desktop/results"
models<-c("dot_product_stopping")
m<-c("/dot_product_stopping/median_initialization/obj_0.01")
library(data.table)
folder="/Users/can/desktop/results"
models<-c("dot_product_stopping")
m<-c("/dot_product_stopping/median_initialization/obj_0.01")
file_name_extension<-c("_rank_cg_prototype.csv")
dataset<-c("xor")
mean_test_roc_summary[i,1]=dataset[i]
mean_test_roc_summary[1,1]=dataset[1]
tmp=paste0(folder,m[1])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[1],file_name_extension[1])
data<-read.csv(tmp_file)
View(data)
library(data.table)
folder="/Users/can/desktop/results"
models<-c("dot_product_stopping")
m<-c("rank_svm","/dot_product_stopping/median_initialization/obj_0.01")
file_name_extension<-c("rank_svm","_rank_cg_prototype.csv")
dataset<-c("xor")
tmp=paste0(folder,m[1])
setwd(tmp)
tmp
library(data.table)
folder="/Users/can/desktop/results"
models<-c("dot_product_stopping")
m<-c("/rank_svm","/dot_product_stopping/median_initialization/obj_0.01")
file_name_extension<-c("rank_svm","_rank_cg_prototype.csv")
dataset<-c("xor")
tmp=paste0(folder,m[1])
setwd(tmp)
#dataset[1]
tmp_file<-paste0(dataset[1],file_name_extension[1])
data_rank_svm<-read.csv(tmp_file)
View(data)
